
;;
; network evolution


to network:evolve-network
  
  if network:network-update? = true [
  
    if network-type = "virtual" [
      ; virtual network : evolve only inpedance of distance matrix, corresponds thematically to speed of virtual network
      ; simple growth equation :
      ;   d_ij (t+1) = d_ij (t) * (1 + g_max * \frac{ (phi_ij/phi_0) ^ \gamma - 1 }{(phi_ij/phi_0) ^ \gamma + 1}
    
      ;set distance-matrix (matrix:times-element-wise distance-matrix (matrix:map [(network-reinforcment-threshold / (? + 1e-7)) ^ network-reinforcment-exponent] gravity-flows)) 
      set distance-matrix (matrix:times-element-wise distance-matrix (matrix:map [? -> 1 + (network-reinforcment-gmax * (1 - (? / network-reinforcment-threshold)^ network-reinforcment-exponent) / (1 + (? / network-reinforcment-threshold)^ network-reinforcment-exponent))] gravity-flows))
    
    ]
  
  
    if network-type = "physical" or network-type = "real" [
       ; physical network : embodies flows -> feedback computed differently
       ; different possible heuristics for growth
      
       ; grow the network
       network:grow-physical-network
     
       ; update distance matrices
       network:update-distance-matrices
      
    ]
    
    ;; FIXME do not use real for that
    ;if network-type = "real" [
    ;   ; real distances matrices (not coevolution, for benchmarking city growth model)
    ;   set distance-matrix matrix:copy (table:get real-distance-matrices (item ticks dates)) 
    ;   set feedback-distance-matrix matrix:copy (table:get real-feedback-distance-matrices (item ticks dates)) 
    ;]
  
  
    ; put distance matrix in history
    ;show (word "avg distmat = " (mean (map mean matrix:to-row-list distance-matrix)))
    table:put distance-matrices (item ticks dates) matrix:copy distance-matrix
    
    ; update interaction weights
    cities:update-weights
    
  ]
  
end

;;
; condition to update the network
to-report network:network-update?
  report true
end


;;
; grow physical network
to network:grow-physical-network
  
  if physical-network-heuristic = "slime-mould" [
    ; evolve speeds (i.e. impedances) following a slime mould heuristic
    ;  flows already computed in population (for feedbak if needed)
    ; no new links in this heuristic
    
    if slime-mould-reinforcment-function = "thresholded" [
      set physical-network-reinforcment-threshold quantile [path:flow] of links with [path:flow > 0] physical-network-reinforcment-quantile
    
      ask paths [
        set path:travel-time path:travel-time * (1 + (network-reinforcment-gmax * (physical-network-reinforcment-threshold ^ network-reinforcment-exponent - path:flow ^ network-reinforcment-exponent) / (physical-network-reinforcment-threshold ^ network-reinforcment-exponent + path:flow ^ network-reinforcment-exponent)))
        set path:pace path:travel-time / path:length
      ]
    ]
    
    if slime-mould-reinforcment-function = "full-growth" [
    
      let mf max [path:flow] of paths
      ask paths [
        set path:travel-time path:travel-time * (1 - (network-reinforcment-gmax * ((path:flow / mf) ^ network-reinforcment-exponent) ))
      ]
    ]
    
  ]
  
  if physical-network-heuristic = "breakdown" [
  
  ]
  
end


to network:update-distance-matrices
  ; recompute nw measures (needed twice)
  network:cache-nw-measures
  
  ask cities [
    ask other cities [
      matrix:set distance-matrix city:index [city:index] of myself (table:get nw-distances (list city:index [city:index] of myself))
    ]
  ]
end




;;
;
to local-shortcuts
  
  repeat synthetic-shortcut-number [
    ; draw randomly one city prop to pop conditionnally to degree
    let potential-cities (cities with [count my-links < synthetic-city-max-degree])
    let ptot sum [city:population] of potential-cities let r random-float 1 let s 0 let found? false
    ask potential-cities [
      set s s + (city:population / ptot)
      if s > r and not found? [
        set found? true let potential-dest (((other cities) in-radius synthetic-shortcut-radius) with [count my-links < synthetic-city-max-degree and not link-neighbor? myself])
        if count potential-dest > 0 [create-link-with one-of potential-dest]
      ] 
    ]
  ]
  
end





;; 
;  network indicators
to network:cache-nw-measures
  
  ; caching shortest paths and measures
  nw:set-context turtles paths
  ask paths [
    set path:bw-centrality 0
    set path:flow 0
    set path:feedback-flow 0
  ]
  ask cities [set city:bw-centrality 0 set city:flow 0]
  set shortest-paths table:make set nw-relative-speeds table:make set nw-distances table:make set pairs-total-weight 0
  let clist to-list cities let n count cities
  let i 0 let j 1
  let ltot 0
  repeat (length clist - 1) [
    let c1 item i clist
    set j i + 1
    repeat (length clist - i - 1) [
      let c2 item j clist
      ; get current real flow
      let current-flow matrix:get gravity-flows [city:index] of c1 [city:index] of c2
      let current-feedback-flow matrix:get feedback-flows [city:index] of c1 [city:index] of c2
      ; compute shortest path
      let currentpath [] let tpath [] ask c1 [set currentpath nw:weighted-path-to c2 "path:travel-time" set tpath nw:turtles-on-weighted-path-to c2 "path:travel-time"]
      ; update link betweeness
      let l 0 foreach currentpath [? -> ask ? [
        set l l + path:travel-time
        set path:bw-centrality path:bw-centrality + 1
        set path:flow path:flow + (current-flow * 2 / (n * (n - 1)))
        set path:feedback-flow path:feedback-flow + (current-feedback-flow * 2 / (n * (n - 1)))]]
      ; update node betweeness
      ;foreach tpath [ask ? [set city-bw-centrality city-bw-centrality + 1 set city-flow city-flow + (current-flow * 2 / (n * (n - 1)))]]
      ; update shortest path table
      table:put shortest-paths (list [city:index] of c1 [city:index] of c2) currentpath table:put shortest-paths (list [city:index] of c2 [city:index] of c1) (rev currentpath)
      ; update nw distance table
      table:put nw-distances (list [city:index] of c1 [city:index] of c2) l table:put nw-distances (list [city:index] of c2 [city:index] of c1) l
      ; update relative speed table
      let deucl 0 ask c1 [set deucl distance c2]
      table:put nw-relative-speeds (list [city:index] of c1 [city:index] of c2) (deucl / l)
      ; TODO : also an absolute network perf, with effective-length instead of length
      
      set pairs-total-weight pairs-total-weight + [city:population] of c1 + [city:population] of c2
      set j j + 1
      set ltot ltot + l
    ]
    set i i + 1
  ]
  show (word "avg distance cities = " (2 * ltot / (n * (n - 1))))
  
end


;;
; connect cities to the network
to network:connect-cities
  ask cities [
    if count my-paths = 0 [create-path-with one-of nodes with-min [distance myself]]
  ]
end






to node:new-node
  set hidden? true
end



to path:new-path
  set path:length link-length 
  ifelse path:initial-pace = 0 [
    set path:pace 1
  ][
    set path:pace path:initial-pace
  ]
  set path:travel-time path:length * path:pace
  set path:flow 0
  set hidden? false
end







