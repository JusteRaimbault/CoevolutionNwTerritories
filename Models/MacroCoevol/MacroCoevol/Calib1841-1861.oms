import java.text.SimpleDateFormat
import java.util.Date

logger.level("FINE")

// Parameters
val period = Val[String]
val growthRate = Val[Double]
val gravityWeight = Val[Double]
val gravityGamma = Val[Double]
val gravityDecay = Val[Double]
val gravityAlpha = Val[Double]
val feedbackWeight = Val[Double]
val feedbackGamma = Val[Double]
val feedbackDecay = Val[Double]
val nwType = Val[Int]
val nwThreshold = Val[Double]
val nwExponent = Val[Double]
val nwGmax = Val[Double]
val slimeMouldFun = Val[Int]

// Reporters
val logmsepop=Val[Double]
val mselogpop=Val[Double]
val logmsedist=Val[Double]

//setup-experiment-real-calibration calibperiod growthrate grav-weight grav-gamma grav-decay feed-weight feed-gamma feed-decay nw-type nw-threshold nw-exp nw-gmax slimemouldfun
val cmds = Seq("setup-experiment-real-calibration \"${period}\" ${growthRate} ${gravityWeight} ${gravityGamma} ${gravityDecay} ${feedbackWeight} ${feedbackGamma} ${feedbackDecay} ${nwType} ${nwThreshold} ${nwExponent} ${nwGmax} ${slimeMouldFun}","run-experiment")












val currentperiod = "1841-1861"










// Model
val model =
NetLogo6Task(workDirectory / "HEADLESS_MacroCoEvol.nlogo",cmds,embedWorkspace=true,reuseWorkspace=true) set(
    inputs += (period,growthRate,gravityWeight,gravityGamma,gravityDecay,/*feedbackWeight,feedbackGamma,feedbackDecay,nwType,*/nwThreshold,nwExponent,nwGmax,slimeMouldFun),
    outputs += (period,growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay,nwType,nwThreshold,nwExponent,nwGmax,slimeMouldFun),
    netLogoOutputs += ("log-mse-population", logmsepop),
    netLogoOutputs += ("mse-log-population", mselogpop),
    netLogoOutputs += ("log-mse-distance", logmsedist),
    period := currentperiod,
    feedbackWeight := 0.0,
    feedbackGamma := 1.0,
    feedbackDecay := 1.0,
    nwType := 0
)
val modelCapsule = Capsule(model)


val env = LocalEnvironment(30)
//val env = EGIEnvironment("vo.complex-systems.eu")//,openMOLEMemory = 4000 megabytes)


//val currentperiod = "1831-1851"


val datestr = (new SimpleDateFormat("yyyyMMdd")).format(new Date())
//val purpose = "calibperiod_island_abstractnw_grid"
val purpose = "CALIBPERIOD_REALNW_LOCAL"
//val purpose = "TEST"
val resdir = datestr+"_"+purpose

/*val varSetting = ExplorationTask(
  (period is currentperiod)
  x (feedbackWeight is 0.0)
  x (feedbackGamma is 1.0)
  x (feedbackDecay is 1.0)
  //x (nwType is 1)
  x (nwType is 0)
) set(
//  inputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay,nwThreshold,nwExponent,nwGmax,slimeMouldFun),
//  outputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay,nwThreshold,nwExponent,nwGmax,slimeMouldFun),
)*/

//val eval = varSetting -< model

val evolution =
  NSGA2Evolution(
    genome =
          Seq(
              growthRate in Range(0.0, 0.2)
              ,gravityWeight in Range(0.00005,0.03)
              ,gravityGamma in Range(0.1,10.0)
              ,gravityDecay in Range(1.0,1000.0)
              //,feedbackWeight in Range(0.00005,10.0)
              //,feedbackGamma in Range(0.0,100.0)
              //,feedbackDecay in Range(0.1,1000.0)
              ,nwThreshold in Range(0.1,20.0)
              ,nwExponent in Range(0.1,10.0)
              ,nwGmax in Range(0.0,0.2)
              ,slimeMouldFun in Seq(0,1)
            ),
            mu = 200,
          objectives = Seq(logmsepop,logmsedist),
          evaluation = model,
          termination = 2 hours,
          //termination = 10 minutes,
          parallelism = 30//,
          //distribution = Island(10 minutes)
)

//val savePopulation = SavePopulationHook(island, workDirectory / "calibration" / resdir / currentperiod)
val savePopulation = SavePopulationHook(evolution, workDirectory / "calibration" / resdir / currentperiod)

//(evolution on local hook savePopulation)
(evolution on env hook savePopulation)










//
