
;;
; display


to display:update-display
  if global:headless? != true [
    ; cities
    display:display-cities
  
    ; network
    display:display-network
  
    ; specific plots
    display:display-plots
  
  ]
end


to display:color-patches
  ifelse global:setup-type = "gis" and global:geo-paths? = true [
    ;ask patches [set pcolor scale-color brown elevation 0 4000]
    ask patches [set pcolor scale-color yellow elevation 0 4000]
    
    ;ask patches with [elevation = -1] [set pcolor white]
    ;let gradient-mid 500
    ;ask patches with [elevation <= gradient-mid and elevation != -1] [
    ;  set pcolor gradient:scale (list extract-rgb green extract-rgb brown) elevation 0 gradient-mid
    ;  
    ;]
    ;ask patches with [elevation > gradient-mid and elevation != -1] [
    ;  set pcolor gradient:scale (list extract-rgb brown extract-rgb white) elevation gradient-mid 4000
   ; 
    ;]
  ][
    ask patches [set pcolor 9]
  ]
end


to display:display-cities
  let ptot sum [city:population] of cities
  
  if global:visualization = "mse" [ask cities [set city:color-var (city:current-mse / city:population * ptot)]]
  if global:visualization = "mse-log" [ask cities [set city:color-var city-mse-log ticks]]
  if global:visualization = "log-pop" [ask cities [set city:color-var ln city:population]]
  
  let mi min [city:color-var] of cities let ma max [city:color-var] of cities
  if mi < ma [
  ask cities [
    set size (ln city:population) ;/ 10
    ;set color gradient:scale (list extract-rgb blue extract-rgb red) color-var mi ma
    ;set color scale-color red color-var (mi - 2) ma
    set color scale-color red city:color-var mi ma
  ]
  ]
end


to display:display-network
  
  if global:network-type = "virtual" [
    if global:show-virtual-flows? [
      ask links [die]
      let distance-diff global:distance-matrix matrix:- (table:get global:distance-matrices (first global:dates))
      ask cities [
        let currentdistdiff matrix:get-row distance-diff city:index
        ask other cities [let d item city:index currentdistdiff if d < 0 [create-link-with myself [set thickness (abs d) / 10]]]
      ]
    ]
  ]
  
  
  if global:network-type = "physical" or global:network-type = "real" [
    if global:link-display-var = "speed" [
      ;ask links [set thickness relative-speed / ((1 + network-reinforcment-gmax) ^ final-time-step)]
      ;ask links [set hidden? false] ask paths with [path-length < effective-length] [set hidden? true]
      ; ! relative-speed is a pace
      let mi min [ln (1 / path:pace)] of links let ma max [ln (1 / path:pace)] of links
      ;ask links [set thickness 4 * ((ln relative-speed) - mi) / (ma - mi) ]
      ifelse mi < ma [
         ; hardcoded link width is hardcore
        let maxthickness 5.0 if global:network-type = "real" [set maxthickness 3.0]
        ask links [set thickness maxthickness * ((ln (1 / path:pace)) - mi) / (ma - mi) ]
      ][
        ask links [set thickness 0]
      ]
    ]
    if global:link-display-var = "flow" [
      ask links [set thickness 25 * ln (1 + path:flow)]
      if ticks > 0 [ask links [set hidden? false] ask links with [path:flow = 0] [set hidden? true]]
    ]
  ]
end


to display:display-plots
  ; fit plot
  if global:setup-type = "gis" [
    set-current-plot "fit" set-current-plot-pen "default"
    ;let col gradient:scale (list extract-rgb blue extract-rgb red) ticks 0 (length dates)
    let col scale-color red ticks 0 (length global:dates)
    ;set-plot-pen-color (approximate-rgb item 0 col item 1 col item 2 col)
    set-plot-pen-color col
    let sim map ln (sort-by [[?1 ?2] -> ?1 > ?2] (matrix:get-column global:populations ticks))
    let real map ln (sort-by [[?1 ?2] ->  ?1 > ?2] (matrix:get-column global:real-populations ticks))
    let i 0 plot-pen-up plotxy first real first sim
    plot-pen-down
    foreach sim [? ->
       plotxy item i real ? set i i + 1
    ]
  ]
  
  ; rank-size plot
  set-current-plot "rank-size" set-current-plot-pen "default"
  ;let col gradient:scale (list extract-rgb blue extract-rgb red) ticks 0 (length dates)
  let col scale-color red ticks 0 (length global:dates)
  set-plot-pen-color col;(approximate-rgb item 0 col item 1 col item 2 col)
  let pops map [? -> log ? 10] (sort-by [[?1 ?2] -> ?1 > ?2] (matrix:get-column global:populations ticks))
  let ranks map [? -> log ? 10] (utils:list:seq 1 count cities 1)
  let i 0 plot-pen-up plotxy first ranks first pops
    plot-pen-down
    foreach pops [? ->
       plotxy item i ranks ? set i i + 1
    ]
  
end

;;
; plot drawing population trajectory of a given city
to display:setup-real-sim-city-plot
  if global:setup-type = "gis" [let c one-of cities with [city:name = city-traj] if c != nobody [set-current-plot-pen "sim" plot [city:population] of c]]
  if global:setup-type = "gis" [let c one-of cities with [city:name = city-traj] if c != nobody [set-current-plot-pen "real" plot [city:population] of c]]
end

;;
; update city traj sim-real plot
to display:update-real-sim-city-plot [mode]
  if global:setup-type = "gis" [
    let c one-of cities with [city:name = city-traj] if c != nobody [
      let pop 0 ifelse mode = "simulated" [set pop [last city:population-history] of c][set pop [last city:expected-population-history] of c]
      plot pop
    ]
  ]
end






